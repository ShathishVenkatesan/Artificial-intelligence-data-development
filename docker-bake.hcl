# The default targets to be built if none are specified
group "default" {
  targets = ["bare", "devel", "cloud", "lightwood", "huggingface"]
}

# Define variables for image configuration
variable "PUSH_TO_DOCKERHUB" {
  default = false
}

variable "IMAGE" {
  default = "mindsdb"
}

# Version variable - set to "unknown" by default (use GitHub sha or semantic version)
variable "VERSION" {
  default = "unknown"
}

# Platforms to build for, defaulting to linux/amd64 and linux/arm64
variable "PLATFORMS" {
  default = "linux/amd64,linux/arm64"
}

# Convert PLATFORMS string into a list
variable PLATFORM_LIST {
  default = split(",", PLATFORMS)
}

# Branch to use for the build process (default is "main")
variable "BRANCH" {
  default = "main"
}

# ECR repository for storing images
variable "ECR_REPO" {
  default = "454861456664.dkr.ecr.us-east-2.amazonaws.com"
}

# Function to determine cache location for image build
function "get_cache_to" {
  params = [image]
  result = length(PLATFORM_LIST) > 1 ? [] : [
    "type=registry,image-manifest=true,oci-mediatypes=true,mode=max,ref=${ECR_REPO}/${IMAGE}-cache:${replace("${BRANCH}", "/", "-")}-${image}-${replace("${PLATFORM_LIST[0]}", "linux/", "")}"
  ]
}

# Function to fetch cache from registry for multiple platforms
function "get_cache_from" {
  params = [image]
  result = flatten([for p in PLATFORM_LIST:
    split("\n", <<EOT
type=registry,ref=${ECR_REPO}/${IMAGE}-cache:${replace("${BRANCH}", "/", "-")}-${image}-${replace("${p}", "linux/", "")}
type=registry,ref=${ECR_REPO}/${IMAGE}-cache:main-${image}-${replace("${p}", "linux/", "")}
EOT
    )
  ])
}

# Function to generate tags for Docker images based on the image name
function "get_tags" {
  params = [image]
  result = [
    "${ECR_REPO}/${IMAGE}:${VERSION}${notequal(image, "bare") ? "-${image}" : ""}",
    "${ECR_REPO}/${IMAGE}:${notequal(image, "bare") ? image : "latest"}",
    PUSH_TO_DOCKERHUB ? "mindsdb/${IMAGE}:${VERSION}${notequal(image, "bare") ? "-${image}" : ""}" : "",
    PUSH_TO_DOCKERHUB ? "mindsdb/${IMAGE}:${notequal(image, "bare") ? image : "latest"}" : ""
  ]
}

### OUTPUT IMAGES ###

# Define the images target with different configurations for each platform and image type
target "images" {
  name = item.name
  dockerfile = "docker/mindsdb.Dockerfile"
  platforms = PLATFORM_LIST
  matrix = {
    item = [
      {
        name = "bare"
        extras = ""
        target = ""
      },
      {
        name = "devel"
        extras = ""
        target = "dev"
      },
      {
        name = "lightwood"
        extras = ".[lightwood]"
        target = ""
      },
      {
        name = "huggingface"
        extras = ".[huggingface]"
        target = ""
      },
      {
        name = "cloud"
        extras = ".[lightwood,huggingface,statsforecast-extra,neuralforecast-extra,timegpt,mssql,youtube,gmail,pgvector,writer,rag,github,snowflake,bigquery,elasticsearch,s3,dynamodb,databricks,oracle,teradata,hive,one_drive] darts datasetsforecast"
        target = ""
      }
    ]
  }

  # Use the corresponding values for the target
  target = item.target

  # Tags generated by the get_tags function
  tags = get_tags(item.name)

  # Arguments to pass to the build
  args = {
    EXTRAS = item.extras
  }

  # Cache settings
  cache-to = get_cache_to(item.name)
  cache-from = get_cache_from(item.name)
}
